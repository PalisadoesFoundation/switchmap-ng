#!/usr/bin/env python3
"""Switchmap-NG poller daemon.

Updates the database with device SNMP data.

"""

# Standard libraries
import time
import sys
import os
from collections import namedtuple

# Try to create a working PYTHONPATH
_SYS_DIRECTORY = os.path.dirname(os.path.realpath(__file__))
_BIN_DIRECTORY = os.path.abspath(os.path.join(_SYS_DIRECTORY, os.pardir))
_ROOT_DIRECTORY = os.path.abspath(os.path.join(_BIN_DIRECTORY, os.pardir))
if (
    _SYS_DIRECTORY.endswith("{0}switchmap-ng{0}bin{0}systemd".format(os.sep))
    is True
):
    sys.path.append(_ROOT_DIRECTORY)
else:
    print(
        'This script is not installed in the "switchmap-ng{0}bin{0}systemd" '
        "directory. Please fix.".format(os.sep)
    )
    sys.exit(2)

# Import app libraries
from switchmap import AGENT_INGESTER
from switchmap.core.agent import Agent, AgentCLI
from switchmap.core import general
from switchmap.server.configuration import ConfigServer
from switchmap.server.db.ingest import ingest
from switchmap.core import log

# We have to create this named tuple outside the multiprocessing Pool
# for it to be pickled
_Poll = namedtuple("_Poll", "hostname idx_event")


class IngesterAgent(Agent):
    """Agent that gathers data."""

    def __init__(self, parent):
        """Initialize the class.

        Args:
            parent: Name of parent

        Returns:
            None

        """
        # Instantiate subclass
        Agent.__init__(self, parent)

        # Initialize key variables
        self.name = parent

        # Get configuration
        self._config = ConfigServer()

    def query(self):
        """Query all remote hosts for data.

        Args:
            None

        Returns:
            None

        """
        # Initialize key variables
        delay = self._config.ingest_interval()

        # Post data to the remote server
        while True:
            # Log the start time
            ts_start = int(time.time())

            # Test for the lock file
            if os.path.isfile(self.lockfile) is True:
                log_message = (
                    "Ingest lock file {} exists. "
                    "Is an ingest process already running?".format(
                        self.lockfile
                    )
                )
                log.log2debug(1054, log_message)
                break

            # Create lockfile
            open(self.lockfile, "a").close()

            # Log
            log_message = "Starting device ingest sequence."
            log.log2info(1056, log_message)

            # Ingest data
            multiprocessing = self._config.multiprocessing()
            _ingest = ingest.Ingest(
                self._config, multiprocessing=multiprocessing
            )
            _ingest.process()

            # Delete lockfile
            if os.path.isfile(self.lockfile):
                os.remove(self.lockfile)

            # Log
            duration = int(time.time() - ts_start)
            log_message = """
Completed device ingest sequence. {}s duration""".format(
                duration
            )
            log.log2info(1125, log_message)

            # Sleep for "delay" seconds
            time.sleep(abs(delay - duration))


def main():
    """Start the switchmap.agent.

    Args:
        None

    Returns:
        None

    """
    # Check user
    config = ConfigServer()
    general.check_user(config)

    # Get configuration
    agent_poller = IngesterAgent(AGENT_INGESTER)

    # Do control
    graceful = AgentCLI(graceful=True)
    graceful.control(agent_poller)


if __name__ == "__main__":
    main()
